def longestPalindrome(s):
    # طول رشته را محاسبه می‌کنیم
    n = len(s)
    
    # اگر رشته خالی باشد، همان رشته خالی را برمی‌گردانیم
    if n == 0:
        return s
    
    # متغیر برای ذخیره طولانی‌ترین زیررشته پالیندروم
    result = ''
    
    # طول طولانی‌ترین زیررشته پالیندروم
    result_length = 0
    
    # حلقه برای پیمایش تمام کاراکترهای رشته
    for i in range(n):
        # برای زیررشته‌های پالیندروم با طول فرد
        l, r = i, i
        while l >= 0 and r < n and s[l] == s[r]:
            # اگر طول زیررشته فعلی از طولانی‌ترین زیررشته بیشتر باشد، آن را به‌روزرسانی می‌کنیم
            if r - l + 1 > result_length:
                result = s[l:r+1]
                result_length = r - l + 1
            # گسترش پنجره به چپ و راست
            l -= 1
            r += 1
        
        # برای زیررشته‌های پالیندروم با طول زوج
        l, r = i, i + 1
        while l >= 0 and r < n and s[l] == s[r]:
            # اگر طول زیررشته فعلی از طولانی‌ترین زیررشته بیشتر باشد، آن را به‌روزرسانی می‌کنیم
            if r - l + 1 > result_length:
                result = s[l:r+1]
                result_length = r - l + 1
            # گسترش پنجره به چپ و راست
            l -= 1
            r += 1
    
    # طولانی‌ترین زیررشته پالیندروم را برمی‌گردانیم
    return result